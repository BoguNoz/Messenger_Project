// <auto-generated />
using System;
using Messager_Project.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Messager_Project.Model.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240605165108_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Messager_Project.Model.Enteties.Emotes", b =>
                {
                    b.Property<int>("Emote_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Emote_ID"));

                    b.Property<string>("Emote_Default_Color")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Emote_Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Emote_Unicode")
                        .IsRequired()
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Emote_ID");

                    b.ToTable("_emotes");
                });

            modelBuilder.Entity("Messager_Project.Model.Enteties.Message", b =>
                {
                    b.Property<int>("Message_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Message_ID"));

                    b.Property<string>("Message_Content")
                        .IsRequired()
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Message_Creation")
                        .HasColumnType("datetime2");

                    b.Property<int>("Reciver_ID")
                        .HasColumnType("int");

                    b.Property<int>("Sender_ID")
                        .HasColumnType("int");

                    b.HasKey("Message_ID");

                    b.HasIndex("Reciver_ID");

                    b.HasIndex("Sender_ID");

                    b.ToTable("_messages");
                });

            modelBuilder.Entity("Messager_Project.Model.Enteties.MessageEmotes", b =>
                {
                    b.Property<int>("Relation_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Relation_ID"));

                    b.Property<int>("Emote_ID")
                        .HasColumnType("int");

                    b.Property<int>("Message_ID")
                        .HasColumnType("int");

                    b.HasKey("Relation_ID");

                    b.HasIndex("Emote_ID");

                    b.HasIndex("Message_ID");

                    b.ToTable("_messageEmotes");
                });

            modelBuilder.Entity("Messager_Project.Model.Enteties.User", b =>
                {
                    b.Property<int>("User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("User_Picture")
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("User_ID");

                    b.ToTable("_users");
                });

            modelBuilder.Entity("Messager_Project.Model.Enteties.UserFriends", b =>
                {
                    b.Property<int>("Relation_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Relation_ID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("User1_ID")
                        .HasColumnType("int");

                    b.Property<int>("User2_ID")
                        .HasColumnType("int");

                    b.HasKey("Relation_ID");

                    b.HasIndex("User1_ID");

                    b.HasIndex("User2_ID");

                    b.ToTable("_usersFriends");
                });

            modelBuilder.Entity("Messager_Project.Model.Enteties.Message", b =>
                {
                    b.HasOne("Messager_Project.Model.Enteties.User", "Reciver")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("Reciver_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Messager_Project.Model.Enteties.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("Sender_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reciver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Messager_Project.Model.Enteties.MessageEmotes", b =>
                {
                    b.HasOne("Messager_Project.Model.Enteties.Emotes", "Emote")
                        .WithMany("Message_Emotes")
                        .HasForeignKey("Emote_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Messager_Project.Model.Enteties.Message", "Message")
                        .WithMany("Emotes")
                        .HasForeignKey("Message_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emote");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Messager_Project.Model.Enteties.UserFriends", b =>
                {
                    b.HasOne("Messager_Project.Model.Enteties.User", "User1")
                        .WithMany("User_Friends")
                        .HasForeignKey("User1_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messager_Project.Model.Enteties.User", "User2")
                        .WithMany("Frinds_With_User")
                        .HasForeignKey("User2_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Messager_Project.Model.Enteties.Emotes", b =>
                {
                    b.Navigation("Message_Emotes");
                });

            modelBuilder.Entity("Messager_Project.Model.Enteties.Message", b =>
                {
                    b.Navigation("Emotes");
                });

            modelBuilder.Entity("Messager_Project.Model.Enteties.User", b =>
                {
                    b.Navigation("Frinds_With_User");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("User_Friends");
                });
#pragma warning restore 612, 618
        }
    }
}
